<%- include('../partials/head.ejs') %>
    <%- include('../partials/header.ejs')%>
    <body style="background-color: black; color: white">
        <div class="bdy-container">
            <div class="title">
                <h1 style="text-align: center; padding-top: 5px;">Lethal Tempo</h1>
            </div>
            <div class="body-container">
                <%- include('../partials/nav.ejs') %>
                <% if (track) { %>
                    <div class="track-big">
                        <div class="track-cover-big">
                            <img src="<%= track.album.images[0].url %>" alt="Track image">
                        </div>
                        <div class="track-info-big">
                            <h2 class="track-title-big"><%= track.name %></h2>
                            <p class="artist-name-big"><%= track.artists[0].name %></p>
                            <p class="artist-name-big">Album: <%= track.album.name %></p>
                            <p class="artist-name-big">Released: <%= track.album.release_date %></p>
                            <p class="artist-name-big">Popularity: <%= track.popularity %> <span id="tooltip"><span id="tooltipText">
                              The popularity of a track is a value between 0 and 100, with
                              <br> 100 being the most popular. The popularity is calculated by
                              <br> algorithm and is based, in the most part, on the total number
                              <br> of plays the track has had and how recent those plays are.
                        
                            </span><span class="material-symbols-outlined">help</span></span></p>
                        
                            <%# Likes and dislikes %>
                            <div class="post-ratings-container">
                                <div class="post">
                                    <!-- Like Button -->
                                    <form action="/like/<%= track.id %>" method="GET">
                                      <button type="submit" style="background: none; border: none; padding: 0; color: inherit; font: inherit;">
                                        <span class="material-symbols-outlined" style="font-size: 48px;">thumb_up</span>
                                      </button>
                                      <span class="post-rating-count" style="font-size: 48px;"><%= trackDB.likes %></span>
                                    </form>
                                  </div>
                                  <!-- Dislike Button -->
                                  <div class="post">
                                    <form action="/dislike/<%= track.id %>" method="GET">
                                      <button type="submit" style="background: none; border: none; padding: 0; color: inherit; font: inherit;">
                                        <span class="material-symbols-outlined" style="font-size: 48px;">thumb_down</span>
                                      </button>
                                      <span class="post-rating-count" style="font-size: 48px;"><%= trackDB.dislikes %></span>
                                    </form>
                                  </div>
                                  <a class="logout" style="display: flex; align-items: center; height: 50px;" href="<%= track.uri %>">Listen on Spotify</a>
                                  <button id="play-pause-button">Play</button>
                            </div>
                        </div>
                  </div>
                  <form action="/comment/<%= track.id %>" method="POST">
                    <div class="comments" style="display: flex; flex-direction: column;">
                      <textarea name="comment" id="comment" cols="90" rows="5" placeholder="Enter your comments" style="resize: none;"></textarea>
                    </div>
                    <button type="submit" class="commentBut">Submit Comment</button>
                  </form>
                  <%# Comments will go here %>
                <% } %>

                  <!-- Display comments -->
                <% if (trackDB.comments && trackDB.comments.length > 0) { %>
                  <div class="comments-list">
                    <% trackDB.comments.forEach(comment => { %>
                      <div class="comment">
                        <p>
                          <strong id="name"><%= comment.user.display_name %>:</strong> <%= comment.comment %>
                        </p>
                        <% if (comment.user.spotify_id === userDB.spotify_id) { %>
                          <div class="buttons">
                            <form action="/delete-track-comment/<%= trackDB.track_id %>/<%= comment._id %>" method="post">
                              <button type="submit" class="DeleteBut">Delete</button>
                            </form>
                          </div>
                        <% } %>
                      </div>
                    <% }); %>
                    <% } %>
                  </div>

                </div>
                <!-- Spotify Web Playback SDK -->
        <script src="https://sdk.scdn.co/spotify-player.js"></script>
        <script>
        window.onSpotifyWebPlaybackSDKReady = () => {
            const token = '<%= access_token %>'; // Use the access token from the server
            const player = new Spotify.Player({
                name: 'Web Playback SDK Template',
                getOAuthToken: cb => { cb(token); }
            });

            // Error handling
            player.addListener('initialization_error', ({ message }) => { console.error(message); });
            player.addListener('authentication_error', ({ message }) => { 
              console.error(message); 
              if (message === 'Premium required') {
                  // Hide the play/pause button and stop setting up the player
                  const playPauseButton = document.getElementById('play-pause-button');
                  playPauseButton.style.display = 'none';
                  return;
              }
          });
            player.addListener('account_error', ({ message }) => { console.error(message); });
            player.addListener('playback_error', ({ message }) => { console.error(message); });

            // Playback status updates
            player.addListener('player_state_changed', state => { console.log(state); });

            // Ready
            player.addListener('ready', ({ device_id }) => {
                console.log('Ready with Device ID', device_id);

                // Play a track
              fetch("https://api.spotify.com/v1/me/player/play?device_id=" + device_id, {
                  method: 'PUT',
                  body: JSON.stringify({ uris: ["spotify:track:<%= track.id %>"] }), // Use the track ID from the server
                  headers: {
                      'Content-Type': 'application/json',
                      'Authorization': `Bearer ${token}`
                  },
              }).then(response => {
                if (!response.ok && response.status === 403) {
                    // If a 403 error occurs, hide the play/pause button
                    const playPauseButton = document.getElementById('play-pause-button');
                    playPauseButton.style.display = 'none';
                }
                return response;
            }).catch(error => console.error('Error:', error));
        
           // Add a delay before pausing the player
            setTimeout(() => {
              player.pause();
            }, 1); // Delay of 1 milisecond!!!
        });

            // Not Ready
            player.addListener('not_ready', ({ device_id }) => {
                console.log('Device ID has gone offline', device_id);
            });

            // Connect to the player!
            player.connect();

            // Get a reference to the play/pause button
            const playPauseButton = document.getElementById('play-pause-button');

            // Toggle play/pause when the button is clicked
            playPauseButton.addEventListener('click', () => {
              player.togglePlay().then(() => {
                console.log('Toggled playback!');
              });
            });

            // Update the button text based on the playback state
            player.addListener('player_state_changed', state => {
              if (state.paused) {
                playPauseButton.textContent = 'Play';
                playPauseButton.style.backgroundColor = 'green';
              } else {
                playPauseButton.textContent = 'Pause';
                playPauseButton.style.backgroundColor = 'red';
              }
            });
        };
        </script>
    </body>
</html>